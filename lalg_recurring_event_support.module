<?php
use Drupal\recurring_events\Entity\EventSeries;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\Entity\BaseFieldOverride;


function lalg_recurring_event_support_form_alter(&$form, &$form_state, $form_id) {
    if($form_id != 'eventseries_lalg_event_add_form' && $form_id != 'eventseries_lalg_event_edit_form') {
        return;
    }
    $config = \Drupal::service('config.factory')->getEditable('recurring_events.eventseries.config');
    $form['weekly_recurring_date']['widget'][0]['weekly_interval'] = [
        "#title" => t("Interval"),
        "#type" => "number",
        "#default_value" => $config->get('weekly_interval') ?: 1,
        "#min" => 1,
        "#max" => 4,
        "#step" => 1,
        "#required" => false,
        "#weight" => 0
    ];
    $form['actions']['submit']['#submit'][] = 'lalg_recurring_event_support_handler_submit';
    $form['#attached']['library'][] = 'lalg_recurring_event_support/lalg_recurring_event_support.create_form';
}

function lalg_recurring_event_support_handler_submit(&$form, $form_state) {
    $value = $form_state->getValue('weekly_recurring_date')[0]['weekly_interval'];
    \Drupal::service('config.factory')
    ->getEditable('recurring_events.eventseries.config')
    ->set('weekly_interval', $value)
    ->save();
}

//function lalg_recurring_event_support_form_FORM_ID_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

function lalg_recurring_event_support_recurring_events_event_instances_pre_create_alter(&$event_instances, EventSeries $event) {
    // Get Weekly interval
    $weekly_interval = $event->weekly_recurring_date->weekly_interval;
    // Get EventSeries start date
    $weekly = $event->weekly_recurring_date->value;
    $recur = $event->recur_type->value;

    // Return if not weekly recur type or interval is less than or equal to 1.
    if($weekly_interval <= 1 || $recur != "weekly_recurring_date") {
        return;
    }
    $start_date = new DateTime($weekly);

    foreach ($event_instances as $key => $instance) {
        $instance_date = new DateTime($instance['start_date']);
        // Compare start date against each instance date
        $diff = (floor($start_date->diff($instance_date)->days)+1)/7;
        if($diff % $weekly_interval != 0) {
            // unset the instance if it has a date at the wrong interval
            unset($event_instances[$key]);
        }
    }
}

/*
 * hook_entity_type_build
 */
function lalg_recurring_event_support_entity_type_build(array &$entity_types) {
    if(isset($entity_types['eventinstance'])) {
        $entity_types['eventinstance']->setHandlerClass('access', 'Drupal\lalg_recurring_event_support\Access\LALGEventInstanceHandler');
    }
}

/*
 * hook_entity_bundle_field_info
 */
function lalg_recurring_event_support_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
    $fields = [];
    if ($entity_type->id() == 'eventseries' && $bundle == 'lalg_event' && !empty($base_field_definitions['title'])) {
        $field = BaseFieldOverride::createFromBaseFieldDefinition($base_field_definitions['title'], $bundle);
        $field->setLabel(t('Admin Title'))
            ->setDescription(t('The administrative title for reference by admins.'));
        $fields['title'] = $field;
    }
    return $fields;
}